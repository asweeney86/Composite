# Note: I have added -fno-merge-constants so that all strings will be
# placed in the .rodata section as opposed to .rodata.str1.x | x in
# uints
#
# -Xlinker -r is used to pass flags into the linker, in this case to
# prevent dietlibc from creating an executable and linking in many of
# its normal symbols

# I never want to touch this again, but will have to

include Makefile.src Makefile.comp

COMPPATH=$(subst /, ,$(shell pwd))
COMPLEN=$(words $(COMPPATH))
COMPLIST=$(wordlist $(shell echo $(COMPLEN)-1 | bc), $(COMPLEN), $(COMPPATH))
COMPNAME=$(shell echo $(strip $(COMPLIST)) | sed "s/ /./")

# These are compiled in with the components regardless of if they
# export an undefined symbol from the component.  They are a manditory
# link-in.
LIB_ASM_MANDITORY=$(LIBDIR)/$(MANDITORY_LIB)

IF_INCLUDE=$(foreach I,$(INTERFACES),-I$(INTERDIR)/$(I)/)
IF_SERV_STUBS=$(foreach I,$(INTERFACES),$(INTERDIR)/$(I)/$(SERVER_STUB))
#dependency components added to include listings and linker listings
DEP_INC=$(foreach D,$(DEPENDENCIES),-I$(INTERDIR)/$(D)/)
DEP_LIB=$(foreach D,$(DEPENDENCIES),-L$(INTERDIR)/$(D)/)
DEP_LIB_EXIST=$(foreach D, $(DEPENDENCIES), $(if $(wildcard $(INTERDIR)/$(D)/*.a), -l$(D)))
IF_CLIENT_STUBS=$(foreach D, $(DEPENDENCIES),      \
 $(if $(wildcard $(INTERDIR)/$(D)/$(CLIENT_STUB)), \
 $(wildcard $(INTERDIR)/$(D)/$(CLIENT_STUB))))

#COMPLIB=$(if $(wildcard $(CLIB)),$(CLIB))
COMPLIB=$(IF_LIB)
OBJS=$(C_OBJS) $(ASM_OBJS) $(COMPLIB)
TMP_STR=tmp
INCLUDE=-I../ $(DEP_INC) $(IF_INCLUDE) $(CINC)
LIB_LIBRARIES_PRE=$(DEP_LIB_EXIST)
LIB_LIBRARIES=$(strip $(LIB_LIBRARIES_PRE))
LIB_FLAGS=-L$(LIBDIR) $(DEP_LIB) -lcos_component $(LIB_LIBRARIES) $(ADDITIONAL_LIBS)

SOURCES=$(C_OBJS:%.o=%.c)
#NOTE: assembly files don't have dependencies generated for them
SOURCE_DEPENDENCIES=$(SOURCES:%.c=%.d)

FNDEP_DIR=../../../cidl
FNDEP_GEN=$(FNDEP_DIR)/comp_undef.py
FNDEP_VERIFY=$(FNDEP_DIR)/verify_completeness.py
IFEXP_GEN=$(FNDEP_DIR)/exp_ifs.py
FNDEP_FILE=.fn_dependencies
IFEXP_FILE=.exported_interfaces

.PHONY: all
all: $(SOURCE_DEPENDENCIES) $(COMPONENT) fndeps

#	@sh $(FNDEP_GEN) c.o > $(FNDEP_FILE)
fndeps:
	$(Q) python $(FNDEP_GEN) > $(FNDEP_FILE)
	$(Q) python $(IFEXP_GEN) > $(IFEXP_FILE)
	$(Q) python $(FNDEP_VERIFY)

# Jumping through hoops: want to link to our libraries first so that
# symbols there are used, thus the gcc, and the ld, but then (and only
# then) do we want to use dietlibc's functions
$(COMPONENT): $(OBJS) 
	$(E) $(LD_STR) $@: Linking $(if $(strip $(LIB_LIBRARIES)),$(LIB_LIBRARIES)) $<
	$(Q) $(LD) -r -o $@.$(TMP_STR) $^ $(IF_SERV_STUBS) $(IF_CLIENT_STUBS) $(LIB_ASM_MANDITORY) $(LIB_FLAGS)
	$(E) $(LD_STR) Linking with dietlibc to produce $@
	$(Q) $(DIETCC) $(DIETCFLAGS) -Xlinker -r -o $@ $@.$(TMP_STR)
	$(E) $(RM_STR) $@.$(TMP_STR)
	$(Q) rm $@.$(TMP_STR)
	$(E) $(CP_STR) $@ c.o
	$(Q) cp $@ c.o

%.o:%.c
	$(E) $(CC_STR) $<: Compiling
	$(Q) $(CC) $(INCLUDE) $(CFLAGS) -o $@ -c $<

%.o:%.S
	$(E) $(AS_STR) $<: Compiling
	$(Q) $(AS) $(INCLUDE) $(ASFLAGS) -c -o $@ $^

# see the make manual: create the .d dependencies from include
# statements.
%.d:%.c
	$(E) $(DEP_STR) Creating dependecy file for $<
	$(Q) set -e; rm -f $@; \
	$(CC) -M $(INCLUDE) $(CFLAGS) $< > $@.$$$$; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

.PHONY: cp
cp:
	$(E) $(CP_STR) Copying $(COMPONENT) to $(TRANS_DIR))
	$(Q) cp $(COMPONENT) $(TRANS_DIR)
	$(Q) cp c.o $(TRANS_DIR)/$(COMPNAME).o

.PHONY: clean
clean:
	$(E) $(RM_STR) Cleaning $(COMPNAME)
	$(Q) $(RM) -f a.out *.o *.a *.d *.d.* *~ $(FNDEP_FILE) $(IFEXP_FILE)

fresh: clean all

-include $(SOURCE_DEPENDENCIES)

